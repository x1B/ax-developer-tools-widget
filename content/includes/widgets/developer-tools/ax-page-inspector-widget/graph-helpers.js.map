{"version":3,"sources":["graph-helpers.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;OAKY,WAAW,yBADrB,MAAM,CACH,KAAK;OAGC,UAAU,yBADnB,KAAK,CACH,KAAK;;AAKF,YAAS,KAAK,CAAE,QAAQ,EAAG;;AAE/B,UAAM,QAAQ,GAAG,EAAE,CAAC;AACpB,UAAM,KAAK,GAAG,EAAE,CAAC;;UAET,OAAO,GAAyC,QAAQ,CAAxD,OAAO;UAAE,eAAe,GAAwB,QAAQ,CAA/C,eAAe;UAAE,iBAAiB,GAAK,QAAQ,CAA9B,iBAAiB;;AACnD,UAAM,IAAI,GAAG,eAAe,CAAE,OAAO,CAAE,CAAC;;AAExC,YAAM,CAAC,IAAI,CAAE,IAAI,CAAC,KAAK,CAAE,CAAC,OAAO,CAAE,UAAA,QAAQ,EAAI;AAC5C,aAAI,CAAC,KAAK,CAAE,QAAQ,CAAE,CAAC,OAAO,CAAE,UAAA,SAAS,EAAI;AAC1C,gBAAI,SAAS,CAAC,MAAM,EAAG;AACpB,gCAAiB,CAAE,SAAS,CAAE,CAAC;aACjC;UACH,CAAE,CAAC;OACN,CAAE,CAAC;;AAEJ,aAAO,UAAU,CAAC,OAAO,CAAC,KAAK,CAAE;AAC9B,iBAAQ,EAAR,QAAQ;AACR,cAAK,EAAL,KAAK;OACP,CAAE,CAAC;;AAEJ,eAAS,iBAAiB,CAAE,MAAM,EAAG;;AAElC,aAAM,UAAU,GAAG,iBAAiB,CAAE,MAAM,CAAC,MAAM,CAAE,CAAC;AACtD,aAAM,KAAK,GAAG,EAAE,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;AAC5C,sBAAa,CAAE,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,CAAE,CAAC;AAC1D,iBAAQ,CAAE,MAAM,CAAC,EAAE,CAAE,GAAG;AACrB,cAAE,EAAE,MAAM,CAAC,EAAE;AACb,iBAAK,EAAE,MAAM,CAAC,MAAM;AACpB,iBAAK,EAAE,KAAK;UACd,CAAC;;AAEF,kBAAS,aAAa,CAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAG;AAC3C,gBAAI,CAAC,KAAK,IAAI,CAAC,MAAM,EAAG;AACrB,sBAAO;aACT;;AAED,gBAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,IACxB,MAAM,CAAC,MAAM,KAAK,OAAO,IACzB,MAAM,CAAC,MAAM,EAAG;AACjB,mBAAM,IAAI,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,GAAG,aAAa,CAAE,IAAI,CAAE,CAAC;AACvF,mBAAI,CAAC,IAAI,EAAG;AACT,yBAAO;gBACT;AACD,mBAAM,MAAM,GAAG,KAAK,CAAC;AACrB,oBAAK,CAAE,MAAM,CAAC,MAAM,KAAK,QAAQ,GAAG,UAAU,GAAG,SAAS,CAAE,CAAC,IAAI,CAAE;AAChE,uBAAK,EAAE,IAAI,CAAC,IAAI,CAAE,GAAG,CAAE;AACvB,oBAAE,EAAE,IAAI,CAAC,IAAI,CAAE,GAAG,CAAE;AACpB,sBAAI,EAAJ,IAAI;AACJ,wBAAM,EAAN,MAAM;gBACR,CAAE,CAAC;AACJ,mBAAI,MAAM,IAAI,CAAC,KAAK,CAAE,MAAM,CAAE,EAAG;AAC9B,uBAAK,CAAE,MAAM,CAAE,GAAG,EAAE,IAAI,EAAJ,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC;gBACzC;aACH;;AAED,gBAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,MAAM,CAAC,UAAU,EAAG;AACjD,qBAAM,CAAC,IAAI,CAAE,MAAM,CAAC,UAAU,CAAE,CAAC,OAAO,CAAE,UAAA,GAAG,EAAI;AAC9C,+BAAa,CACV,KAAK,CAAE,GAAG,CAAE,EACZ,MAAM,CAAC,UAAU,CAAE,GAAG,CAAE,IAAI,MAAM,CAAC,oBAAoB,EACvD,IAAI,CAAC,MAAM,CAAE,CAAE,GAAG,CAAE,CAAE,CACxB,CAAC;gBACJ,CAAE,CAAC;aACN;;AAED,gBAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAG;AAC3B,oBAAK,CAAC,OAAO,CAAE,UAAC,IAAI,EAAC,CAAC,EAAK;AACxB,+BAAa,CACV,IAAI,EACJ,MAAM,CAAC,KAAK,EACZ,IAAI,CAAC,MAAM,CAAE,CAAE,CAAC,CAAE,CAAE,CACtB,CAAC;gBACJ,CAAE,CAAC;aACN;UAEH;;AAED,kBAAS,aAAa;;;sCAAS;mBAAP,IAAI;;;AACzB,mBAAI,CAAC,IAAI,CAAC,MAAM,EAAG;AAChB,yBAAO,IAAI,CAAC;gBACd;AACD,mBAAM,WAAW,GAAG,IAAI,CAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAE,CAAC;AAC5C,mBAAI,CAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,CAAE,CAAC,OAAO,CAAE,WAAW,CAAE,KAAK,CAAC,CAAC,EAAG;AAClE,yBAAO,WAAW,CAAC,WAAW,EAAE,CAAC;gBACnC;AACD,mBAAI,WAAW,KAAK,WAAW,EAAG;AAC/B,yBAAO,QAAQ,CAAC;gBAClB;oBACqB,IAAI,CAAC,KAAK,CAAE,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAE;;AAPhD,0BAAW;;aAQnB;UAAA;OACH;IACH;;AAEM,YAAS,MAAM,CAAE,KAAK,EAAG;AAC7B,UAAM,QAAQ,GAAG,EAAE,CAAC;AACpB,UAAI,CAAC,GAAG,CAAC,CAAC;AACV,WAAK,CAAC,QAAQ,CAAC,OAAO,CAAE,UAAC,CAAC,EAAE,GAAG,EAAK;AACjC,iBAAQ,CAAE,GAAG,CAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;AACjD,WAAE,CAAC,CAAC;OACN,CAAE,CAAC;;AAEJ,UAAI,CAAC,GAAG,CAAC,CAAC;AACV,UAAM,KAAK,GAAG,EAAE,CAAC;AACjB,WAAK,CAAC,KAAK,CAAC,OAAO,CAAE,UAAC,CAAC,EAAE,GAAG,EAAK;AAC9B,cAAK,CAAE,GAAG,CAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;AAChD,WAAE,CAAC,CAAC;OACN,CAAE,CAAC;;AAEJ,aAAO,WAAW,CAAC,OAAO,CAAC,MAAM,CAAE;AAChC,iBAAQ,EAAR,QAAQ;AACR,cAAK,EAAL,KAAK;OACP,CAAE,CAAC;IACN;;AAEM,YAAS,KAAK,GAAG;AACrB,aAAO,UAAU,CAAC,OAAO,CAAC,KAAK,CAAE;AAC9B,iBAAQ,EAAE;AACR,sBAAU,EAAE,SAAS;AACrB,kBAAM,EAAE,KAAK;AACb,iBAAK,EAAE,WAAW;UACnB;AACD,aAAI,EAAE;AACJ,iBAAK,EAAE,OAAO;AACd,kBAAM,EAAE,KAAK;UACd;AACD,eAAM,EAAE;AACN,iBAAK,EAAE,SAAS;AAChB,kBAAM,EAAE,KAAK;UACd;OACH,CAAE,CAAC;IACN","file":"graph-helpers.js","sourcesContent":["\nimport wireflow from 'wireflow';\n\nconst {\n  layout: {\n     model: layoutModel\n  },\n  graph: {\n    model: graphModel\n  }\n} = wireflow;\n\n\nexport function graph( pageInfo ) {\n\n   const vertices = {};\n   const edges = {};\n\n   const { pageRef, pageDefinitions, widgetDescriptors } = pageInfo;\n   const page = pageDefinitions[ pageRef ];\n\n   Object.keys( page.areas ).forEach( areaName => {\n      page.areas[ areaName ].forEach( component => {\n         if( component.widget ) {\n            addWidgetInstance( component );\n         }\n      } );\n   } );\n\n   return graphModel.convert.graph( {\n      vertices,\n      edges\n   } );\n\n   function addWidgetInstance( widget ) {\n      // console.log( \"ADD WIDGET: \", widget );\n      const descriptor = widgetDescriptors[ widget.widget ];\n      const ports = { inbound: [], outbound: [] };\n      identifyPorts( widget.features, descriptor.features, [] );\n      vertices[ widget.id ] = {\n         id: widget.id,\n         label: widget.widget,\n         ports: ports\n      };\n\n      function identifyPorts( value, schema, path ) {\n         if( !value || !schema ) {\n            return;\n         }\n\n         if( schema.type === 'string' &&\n             schema.format === 'topic' &&\n             schema.axRole ) {\n            const type = schema.axPattern ? schema.axPattern.toUpperCase() : inferEdgeType( path );\n            if( !type ) {\n               return;\n            }\n            const edgeId = value;\n            ports[ schema.axRole === 'master' ? 'outbound' : 'inbound' ].push( {\n               label: path.join( '.' ),\n               id: path.join( ':' ),\n               type,\n               edgeId\n            } );\n            if( edgeId && !edges[ edgeId ] ) {\n               edges[ edgeId ] = { type, id: edgeId };\n            }\n         }\n\n         if( schema.type === 'object' && schema.properties ) {\n            Object.keys( schema.properties ).forEach( key => {\n               identifyPorts(\n                  value[ key ],\n                  schema.properties[ key ] || schema.additionalProperties,\n                  path.concat( [ key ] )\n               );\n            } );\n         }\n\n         if( schema.type === 'array' ) {\n            value.forEach( (item,i) => {\n               identifyPorts(\n                  item,\n                  schema.items,\n                  path.concat( [ i ] )\n               );\n            } );\n         }\n\n      }\n\n      function inferEdgeType( path ) {\n         if( !path.length ) {\n            return null;\n         }\n         const lastSegment = path[ path.length - 1 ];\n         if( [ 'action', 'flag', 'resource' ].indexOf( lastSegment ) !== -1 ) {\n            return lastSegment.toUpperCase();\n         }\n         if( lastSegment === 'onActions' ) {\n            return 'ACTION';\n         }\n         return inferEdgeType( path.slice( 0, path.length - 1 ) );\n      }\n   }\n}\n\nexport function layout( graph ) {\n   const vertices = {};\n   let i = 0;\n   graph.vertices.forEach( (_, key) => {\n      vertices[ key ] = { left: 50, top: 50 + 50 * i };\n      ++i;\n   } );\n\n   let j = 0;\n   const edges = {};\n   graph.edges.forEach( (_, key) => {\n      edges[ key ] = { left: 450, top: 150 + 50 * j };\n      ++j;\n   } );\n\n   return layoutModel.convert.layout( {\n      vertices,\n      edges\n   } );\n}\n\nexport function types() {\n   return graphModel.convert.types( {\n      RESOURCE: {\n        owningPort: 'inbound',\n        hidden: false,\n        label: 'Resources'\n      },\n      FLAG: {\n        label: 'Flags',\n        hidden: false\n      },\n      ACTION: {\n        label: 'Actions',\n        hidden: false\n      }\n   } );\n}\n"]}