{"version":3,"sources":["graph-helpers.jsx"],"names":[],"mappings":"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","file":"graph-helpers.js","sourcesContent":["\nimport wireflow from 'wireflow';\n\nconst TYPE_CONTAINER = 'CONTAINER';\n\nconst {\n  layout: {\n     model: layoutModel\n  },\n  graph: {\n    model: graphModel\n  }\n} = wireflow;\n\nconst edgeTypes = {\n   RESOURCE: {\n      hidden: false,\n      label: 'Resources'\n   },\n   FLAG: {\n      label: 'Flags',\n      hidden: false\n   },\n   ACTION: {\n      label: 'Actions',\n      hidden: false\n   },\n   CONTAINER: {\n      hidden: false,\n      label: 'Container',\n      owningPort: 'outbound'\n   }\n};\n\n\n/**\n * Create a wireflow graph from a given page/widget information model.\n *\n * @param {Object} pageInfo\n * @param {Boolean=false} includeIrrelevantWidgets\n *   If set to `true`, widgets without any relevance to actions/resources/flags are removed.\n *   Containers of widgets (that are relevant by this measure) are kept.\n */\nexport function graph( pageInfo, includeIrrelevantWidgets ) {\n\n   const PAGE_ID = '.';\n   const { pageRef, pageDefinitions, widgetDescriptors } = pageInfo;\n   const page = pageDefinitions[ pageRef ];\n\n   const vertices = {};\n   const edges = {};\n\n   identifyVertices();\n   identifyContainers();\n   if( !includeIrrelevantWidgets ) {\n      pruneIrrelevantWidgets();\n   }\n   pruneEmptyEdges();\n\n   return graphModel.convert.graph( {\n      vertices,\n      edges\n   } );\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   function isWidget( pageAreaItem ) {\n      return !!pageAreaItem.widget;\n   }\n\n   function isLayout( pageAreaItem ) {\n      return !!pageAreaItem.layout;\n   }\n\n   function either( f, g ) {\n      return function() {\n         return f.apply( this, arguments ) || g.apply( this, arguments );\n      };\n   }\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   function identifyVertices() {\n      Object.keys( page.areas ).forEach( areaName => {\n         page.areas[ areaName ].forEach( component => {\n            if( component.widget ) {\n               processWidgetInstance( component, areaName );\n            }\n            else if( component.layout ) {\n               processLayoutInstance( component, areaName );\n            }\n         } );\n      } );\n   }\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   function processLayoutInstance( layout, areaName ) {\n      vertices[ layout.id ] = {\n         id: layout.id,\n         kind: 'LAYOUT',\n         label: layout.id,\n         ports: { inbound: [], outbound: [] }\n      };\n   }\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   function processWidgetInstance( widget, areaName ) {\n      const descriptor = widgetDescriptors[ widget.widget ];\n      const ports = { inbound: [], outbound: [] };\n\n      const kinds = {\n         widget: 'WIDGET',\n         activity: 'ACTIVITY'\n      };\n\n      identifyPorts( widget.features, descriptor.features, [] );\n      vertices[ widget.id ] = {\n         id: widget.id,\n         kind: kinds[ descriptor.integration.type ],\n         label: widget.id,\n         ports: ports\n      };\n\n      function identifyPorts( value, schema, path ) {\n         if( !value || !schema ) {\n            return;\n         }\n\n         if( schema.type === 'string' &&\n             ( schema.format === 'topic' || schema.format === 'flag-topic' ) &&\n             schema.axRole ) {\n            const type = schema.axPattern ? schema.axPattern.toUpperCase() : inferEdgeType( path );\n            if( !type ) { return; }\n            const edgeId = type + ':' + value;\n            const label = path.join( '.' );\n            const id =  path.join( ':' );\n            ports[ schema.axRole === 'master' ? 'outbound' : 'inbound' ].push( {\n               label, id, type, edgeId\n            } );\n            if( edgeId && !edges[ edgeId ] ) {\n               edges[ edgeId ] = { type, id: edgeId, label: value };\n            }\n         }\n\n         if( schema.type === 'object' && schema.properties ) {\n            Object.keys( schema.properties ).forEach( key => {\n               const propertySchema = schema.properties[ key ] || schema.additionalProperties;\n               identifyPorts( value[ key ], propertySchema, path.concat( [ key ] ) );\n            } );\n         }\n\n         if( schema.type === 'array' ) {\n            value.forEach( (item, i) => {\n               identifyPorts( item, schema.items, path.concat( [ i ] ) );\n            } );\n         }\n      }\n\n      function inferEdgeType( path ) {\n         if( !path.length ) {\n            return null;\n         }\n         const lastSegment = path[ path.length - 1 ];\n         if( [ 'action', 'flag', 'resource' ].indexOf( lastSegment ) !== -1 ) {\n            return lastSegment.toUpperCase();\n         }\n         if( lastSegment === 'onActions' ) {\n            return 'ACTION';\n         }\n         return inferEdgeType( path.slice( 0, path.length - 1 ) );\n      }\n   }\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   function pruneIrrelevantWidgets() {\n      let toPrune = [];\n      do {\n         toPrune.forEach( id => { delete vertices[ id ]; } );\n         pruneEmptyEdges();\n         toPrune = mark();\n      } while( toPrune.length );\n\n      function mark() {\n         const pruneList = [];\n         Object.keys( vertices ).forEach( vId => {\n            const ports = vertices[ vId ].ports;\n            if( ports.inbound.length <= 1 ) {\n               if( ports.outbound.every( _ => !_.edgeId ) ) {\n                  pruneList.push( vId  );\n               }\n            }\n         } );\n         return pruneList;\n      }\n   }\n\n   function pruneEmptyEdges() {\n      const toPrune = [];\n      Object.keys( edges ).forEach( edgeId => {\n         const type = edgeTypes[ edges[ edgeId ].type ];\n         const masters = Object.keys( vertices ).filter( isMasterOf( edgeId ) );\n         const slaves = Object.keys( vertices ).filter( isSlaveOf( edgeId ) );\n         const hasMasters = masters.length > 0;\n         const hasSlaves = slaves.length > 0;\n         const isEmpty = type.owningPort ? (!hasMasters || !hasSlaves) : (!hasMasters && !hasSlaves);\n         if( !isEmpty ) {\n            return;\n         }\n\n         toPrune.push( edgeId );\n         masters.concat( slaves ).forEach( vertexId => {\n            const ports = vertices[ vertexId ].ports;\n            ports.inbound.concat( ports.outbound ).forEach( port => {\n               port.edgeId = port.edgeId === edgeId ? null : port.edgeId;\n            } );\n         } );\n      } );\n      toPrune.forEach( id => { delete edges[ id ]; } );\n\n      function isSlaveOf( edgeId ) {\n         return function( vertexId ) {\n            return vertices[ vertexId ].ports.inbound.some( port => port.edgeId === edgeId );\n         };\n      }\n\n      function isMasterOf( edgeId ) {\n         return function( vertexId ) {\n            return vertices[ vertexId ].ports.outbound.some( port => port.edgeId === edgeId );\n         };\n      }\n   }\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   function identifyContainers() {\n      const type = TYPE_CONTAINER;\n\n      vertices[ PAGE_ID ] =  {\n         PAGE_ID,\n         label: 'Page ' + pageRef,\n         kind: 'PAGE',\n         ports: { inbound: [], outbound: [] }\n      };\n\n      Object.keys( page.areas ).forEach( areaName => {\n         insertEdge( areaName );\n         const owner = findOwner( areaName );\n         if( !owner ) {\n            return;\n         }\n\n         let containsAnything = false;\n         page.areas[ areaName ].filter( either( isWidget, isLayout ) ).forEach( item => {\n            if( vertices[ item.id ] ) {\n               insertUplink( vertices[ item.id ], areaName );\n               containsAnything = true;\n            }\n         } );\n         if( containsAnything ) {\n            insertOwnerPort( owner, areaName );\n         }\n      } );\n\n      function findOwner( areaName ) {\n         if( areaName.indexOf( '.' ) === -1 ) {\n            return vertices[ PAGE_ID ];\n         }\n         const prefix = areaName.slice( 0, areaName.lastIndexOf( '.' ) );\n         return vertices[ prefix ];\n      }\n\n      function insertOwnerPort( vertex, areaName ) {\n         vertex.ports.outbound.unshift( {\n            id: 'CONTAINER:' + areaName,\n            type: TYPE_CONTAINER,\n            edgeId: areaEdgeId( areaName ),\n            label: areaName\n         } );\n      }\n\n      function insertUplink( vertex, areaName ) {\n         vertex.ports.inbound.unshift( {\n            id: 'CONTAINER:anchor',\n            type: TYPE_CONTAINER,\n            edgeId: areaEdgeId( areaName ),\n            label: 'anchor'\n         } );\n      }\n\n      function insertEdge( areaName ) {\n         const id = areaEdgeId( areaName );\n         edges[ id ] = { id, type, label: areaName };\n      }\n\n      function areaEdgeId( areaName ) {\n         return TYPE_CONTAINER + ':' + areaName;\n      }\n   }\n\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport function layout( graph ) {\n   return layoutModel.convert.layout( {\n      vertices: {},\n      edges: {}\n   } );\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport function types() {\n   return graphModel.convert.types( edgeTypes );\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport function filterFromSelection( selection, graphModel ) {\n   const topics = selection.edges.flatMap( edgeId => {\n      const [ type, topic ] = edgeId.split( ':' );\n      return ( type === 'CONTAINER' ) ? [] : [{ pattern: type, topic }];\n   } ).toJS();\n\n   const participants = selection.vertices.flatMap( vertexId => {\n      const { id, kind } = graphModel.vertices.get( vertexId );\n      return ( kind === 'PAGE' || kind === 'LAYOUT' ) ? [] : [{ kind, participant: vertexId }];\n   } );\n\n   return {\n      topics,\n      participants\n   };\n}\n"]}